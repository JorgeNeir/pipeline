name: CI/CD Java Application Deployment on Azure VM -> WebLogic

on:
  workflow_call:
    inputs:
      workdir:
        description: 'The directory of the function'
        required: false
        default: './'
        type: string
      environment:
        description: 'The environment to deploy (e.g., integration, laboratory, production)'
        required: true
        type: string
      #=============================== Inputs no usados =================================#
      acr: {description: 'Unused', required: false, type: string}
      folder: {description: 'Unused', required: false, type: string}
      artifact-name: {description: 'Unused for pom-derived name', required: false, type: string}
      artifact-path: {description: 'Unused', required: false, type: string}
      #===================================================================================#
            
      build-command:
        description: 'The run command for build (e.g., mvn clean package)'
        required: true
        type: string
      java-version:
        description: 'The JDK version'
        required: false
        default: '17'
        type: string
      java-distribution:
        description: 'The JDK distribution'
        required: false
        default: 'corretto'
        type: string
      workload-path: {description: 'Unused', required: false, type: string}
      container-app-name: {description: 'Unused', required: false, type: string}
      compile_folder:
        description: 'Folder where it find the .jar, .ear or .war (relative to workdir)'
        required: true
        type: string
      artifactory-url:
        description: 'Base URL for artifactory (without trailing slash)'
        required: false
        default: 'https://davicienda.jfrog.io/artifactory'
        type: string
      use-artifactory:
        description: 'Whether to use Artifactory/JFrog for dependencies'
        required: false
        default: false
        type: boolean
      maven-repo-id:
        description: 'Maven repository ID to use in settings.xml'
        required: false
        default: 'central'
        type: string
      pom-version-file: # Ruta relativa a workdir
        description: 'Path to the pom.xml file (relative to workdir)'
        required: true
        type: string
      weblogic_username:
        description: 'Usuario para las operaciones de despliegue en WebLogic.'
        required: false
        type: string
        default: 'weblogicdeploy'
      weblogic_home_lib_path:
        description: 'Ruta al directorio de librer√≠as del servidor WebLogic.'
        required: false
        type: string
        default: '/u01/WLS14.1.1/middleware/wlserver/server/lib/'
      artifact_dest_dir_remote:
        description: 'Directorio remoto en el servidor WebLogic para copiar y extraer los artefactos.'
        required: false
        type: string
        default: '/u01/WLS14.1.1/middleware/domains/instaladores'

    secrets:
      REUSABLE_ARTIFACTORY_READER_USER: {description: 'Artifactory reader username.', required: false}
      REUSABLE_ARTIFACTORY_READER_PASSWORD: {description: 'Artifactory reader password.', required: false}
      REUSABLE_TOKEN_GITHUB: {description: 'GitHub token for checking out actions from other private/internal repositories.', required: true}
      REUSABLE_ARTIFACTORY_WRITER_USER: {description: 'Artifactory writer username.', required: false}
      REUSABLE_ARTIFACTORY_WRITER_PASSWORD: {description: 'Artifactory writer password.', required: false}
      REUSABLE_AZURE_VM_SSH_USER: {description: 'SSH username for the Azure VM.', required: true}
      REUSABLE_AZURE_VM_SSH_PRIVATE_KEY: {description: 'SSH private key for the Azure VM.', required: true}
      REUSABLE_WEBLOGIC_PASSWORD: {description: 'WebLogic password for the target environment.', required: true}
      REUSABLE_AZURE_VM_IP: {description: 'IP of the Azure VM for the target environment.', required: true}

jobs:
  build:
    name: CI - Build and Package Application
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java-version }}
          distribution: ${{ inputs.java-distribution }}
        
      - name: Create settings file directory
        run: mkdir -p /home/runner/.m2

      - name: Create Maven settings with Artifactory
        if: ${{ inputs.use-artifactory }}
        run: |
          echo "üìù Creating Maven settings.xml for Artifactory..."
          ARTIFACTORY_URL="${{ inputs.artifactory-url }}/maven-davi" 
          echo '<?xml version="1.0" encoding="UTF-8"?> <settings xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd" xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <servers> <server> <username>${{ secrets.REUSABLE_ARTIFACTORY_READER_USER }}</username> <password>${{ secrets.REUSABLE_ARTIFACTORY_READER_PASSWORD }}</password> <id>${{ inputs.maven-repo-id }}</id> </server> <server> <username>${{ secrets.REUSABLE_ARTIFACTORY_READER_USER }}</username> <password>${{ secrets.REUSABLE_ARTIFACTORY_READER_PASSWORD }}</password> <id>snapshots</id> </server> </servers> <profiles> <profile> <id>artifactory</id> <repositories> <repository> <id>${{ inputs.maven-repo-id }}</id> <url>'$ARTIFACTORY_URL'</url> <releases><checksumPolicy>ignore</checksumPolicy></releases> <snapshots><checksumPolicy>ignore</checksumPolicy></snapshots> </repository> <repository> <id>snapshots</id> <url>'$ARTIFACTORY_URL'</url> <releases><checksumPolicy>ignore</checksumPolicy></releases> <snapshots><checksumPolicy>ignore</checksumPolicy></snapshots> </repository> </repositories> <pluginRepositories> <pluginRepository> <id>${{ inputs.maven-repo-id }}</id> <url>'$ARTIFACTORY_URL'</url> <releases><checksumPolicy>ignore</checksumPolicy></releases> <snapshots><checksumPolicy>ignore</checksumPolicy></snapshots> </pluginRepository> <pluginRepository> <id>snapshots</id> <url>'$ARTIFACTORY_URL'</url> <releases><checksumPolicy>ignore</checksumPolicy></releases> <snapshots><checksumPolicy>ignore</checksumPolicy></snapshots> </pluginRepository> </pluginRepositories> </profile> </profiles> <activeProfiles> <activeProfile>artifactory</activeProfile> </activeProfiles> </settings>' > /home/runner/.m2/settings.xml
          echo "‚úÖ Maven settings.xml created."

      - name: Get version from pom.xml
        working-directory: ${{ inputs.workdir }}
        run: |
          echo "üìù Deriving artifact version from POM: ${{ inputs.pom-version-file }}"
          POM_FILE=${{ inputs.pom-version-file }}
          artifactId=$(mvn -f "$POM_FILE" help:evaluate -Dexpression=project.artifactId -q -DforceStdout | awk 'END{print}')
          version=$(mvn -f "$POM_FILE" help:evaluate -Dexpression=project.version -q -DforceStdout | awk 'END{print}')
          packaging=$(mvn -f "$POM_FILE" help:evaluate -Dexpression=project.packaging -q -DforceStdout | awk 'END{print}')
          if [ -z "$artifactId" ] || [ -z "$version" ] || [ -z "$packaging" ]; then
            echo "‚ùå ERROR: Could not extract artifactId, version, or packaging from POM."
            echo "Attempted to analyze POM: $(pwd)/$POM_FILE"
            exit 1
          fi
          filename_val="${artifactId}-${version}.${packaging}"
          echo "filename=${filename_val}" >> $GITHUB_ENV
          echo "‚úÖ Derived artifact filename: ${filename_val}"

      - name: Build
        working-directory: ${{ inputs.workdir }}
        run: |
          echo "üöÄ Starting build with command: ${{ inputs.build-command }}"
          ${{ inputs.build-command }}
          echo "‚úÖ Build completed."

      - name: Checkout Retrive Action
        if: ${{ inputs.use-artifactory }}
        uses: actions/checkout@v4
        with:
          repository: davivienda-colombia/davi-coe-action-jfrog-pipeline
          ref: 'v1.14.0'
          token: ${{ secrets.REUSABLE_TOKEN_GITHUB }}
          path: ./.github/actions/temp-jfrog-action
        
      - name: Set version for JFrog
        if: ${{ inputs.use-artifactory }}
        env:
          REPO_GH: ${{ github.event.repository.name }}
          ENVIRONMENT_INPUT: ${{ inputs.environment }}
        run: |
          echo "üìù Setting versions for JFrog..."
          dest=""
          case "$ENVIRONMENT_INPUT" in
            integration) dest="int" ;;
            laboratory)  dest="lab" ;;
            production)  dest="prod" ;;
            *) echo "‚ö†Ô∏è WARNING: Environment '$ENVIRONMENT_INPUT' not recognized for JFrog suffix. Using no suffix.";;
          esac
          JFROG_REPO_NAME="${REPO_GH}-${dest}"
          echo "JFROG_REPOSITORY=${JFROG_REPO_NAME}" >> $GITHUB_ENV
          NEW_NAME_VAL="PR-${GITHUB_RUN_NUMBER}"
          echo "NEW_NAME=${NEW_NAME_VAL}" >> $GITHUB_ENV
          echo "‚úÖ JFrog Repository: ${JFROG_REPO_NAME}, ZIP Base Name (NEW_NAME): ${NEW_NAME_VAL}"

        # descomentarear estas lineas cuando se tenga el flujo completo

        # PR_COMMIT=$(git log --merges --grep="Merge pull request" --pretty=format:"%H" | head -n 1)
        # PR_NUMBER=$(git log -1 --pretty=format:"%s" $PR_COMMIT | grep -oP '(?<=#)\d+')   
        # NEW_NAME="PR-$PR_NUMBER"

      - name: Compress artifact
        working-directory: ${{ inputs.workdir }}
        run: |
          echo "üì¶ Compressing artifact: ${{ inputs.compile_folder }}/target/${{ env.filename }} into ${{ env.NEW_NAME }}.zip"
          if [ ! -f "${{ inputs.compile_folder }}/target/${{ env.filename }}" ]; then
            echo "‚ùå ERROR: Artifact file to compress not found at $(pwd)/${{ inputs.compile_folder }}/target/${{ env.filename }}"
            ls -la "${{ inputs.compile_folder }}/target/"
            exit 1
          fi
          zip -j "${{ env.NEW_NAME }}.zip" "${{ inputs.compile_folder }}/target/${{ env.filename }}"
          echo "‚úÖ Compression complete. Verifying ZIP file:"
          ls -l "${{ env.NEW_NAME }}.zip"

      - name: Upload package to JFrog ${{ inputs.environment}}
        if: ${{ inputs.environment == 'integration' && inputs.use-artifactory }}
        uses: ./.github/actions/temp-jfrog-action/retrieve-artifact
        with:
          function: 'upload'
          artifactory-writer-user: ${{ secrets.REUSABLE_ARTIFACTORY_WRITER_USER }}
          artifactory-writer-password: ${{ secrets.REUSABLE_ARTIFACTORY_WRITER_PASSWORD }}
          artifact-url: https://davicienda.jfrog.io/artifactory/${{ env.JFROG_REPOSITORY }} 
          artifact: ${{ inputs.workdir }}/${{ env.NEW_NAME }}.zip 
        
      - name: Validate .zip existence before final upload
        working-directory: ${{ inputs.workdir }}
        run: |
          echo "üßê Validating final ZIP: $(pwd)/${{ env.NEW_NAME }}.zip"
          ls -la "${{ env.NEW_NAME }}.zip"

      - name: Upload application ZIP for Deploy Job
        uses: actions/upload-artifact@v4
        with:
          name: application-package
          path: ${{ inputs.workdir }}/${{ env.NEW_NAME }}.zip
          if-no-files-found: error
          retention-days: 1 # Artifact is temporary for this workflow run
        
  deploy:
    name: CD - Deploy Application to WebLogic
    runs-on: ubuntu-latest
    needs: build
    environment: ${{ inputs.environment }}
    env:
      SSH_HOST_VAR: ${{ secrets.REUSABLE_AZURE_VM_IP }}
      SSH_USER_VAR: ${{ secrets.REUSABLE_AZURE_VM_SSH_USER }}
      WEBLOGIC_PASSWORD_VAR: ${{ secrets.REUSABLE_WEBLOGIC_PASSWORD }}
      WEBLOGIC_ADMIN_URL_VAR: ${{ (inputs.environment == 'integration' && 't3://10.229.165.5:7001') || (inputs.environment == 'laboratory' && 't3://TU_LAB_HOST:7001') || (inputs.environment == 'production' && 't3://TU_PROD_HOST:7001') }}
      WEBLOGIC_TARGETS_VAR: ${{ (inputs.environment == 'integration' && 'CLUSTER_HWEC-D') || (inputs.environment == 'laboratory' && 'CLUSTER_HWEC-L') || (inputs.environment == 'production' && 'CLUSTER_HWEC-P') }}
      WEBLOGIC_USERNAME_VAR: ${{ inputs.weblogic_username }}
      WEBLOGIC_HOME_LIB_PATH_VAR: ${{ inputs.weblogic_home_lib_path }}
      ARTIFACT_DEST_DIR_REMOTE_VAR: ${{ inputs.artifact_dest_dir_remote }}

    steps:
      - name: Setup Java (for pom parsing)
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java-version }}
          distribution: ${{ inputs.java-distribution }}

      - name: Checkout Source Code (for pom parsing)
        uses: actions/checkout@v4
        with:
          # If inputs.workdir is not './', you might need to checkout to that path
          # path: ${{ inputs.workdir }} # And adjust POM_FILE_PATH_IN_CALLER accordingly
          # For now, assuming pom-version-file is relative to root of checkout

      - name: "‚öôÔ∏è Determine artifact names (re-derivation)"
        env:
          POM_FILE_PATH_IN_CALLER: ${{ inputs.pom-version-file }} # Relative to checkout root
        run: |
          echo "üìù Re-deriving artifact names for deployment..."
          NEW_NAME_VAL="PR-${GITHUB_RUN_NUMBER}"
          echo "ZIP_FILENAME=${NEW_NAME_VAL}.zip" >> $GITHUB_ENV
          echo "Analizando POM: ${POM_FILE_PATH_IN_CALLER} para obtener nombre de artefacto interno."
          artifactId=$(mvn -f "${POM_FILE_PATH_IN_CALLER}" help:evaluate -Dexpression=project.artifactId -q -DforceStdout | awk 'END{print}')
          version=$(mvn -f "${POM_FILE_PATH_IN_CALLER}" help:evaluate -Dexpression=project.version -q -DforceStdout | awk 'END{print}')
          packaging=$(mvn -f "${POM_FILE_PATH_IN_CALLER}" help:evaluate -Dexpression=project.packaging -q -DforceStdout | awk 'END{print}')
          if [ -z "$artifactId" ] || [ -z "$version" ] || [ -z "$packaging" ]; then
            echo "‚ùå ERROR: Could not extract artifact details from POM '${POM_FILE_PATH_IN_CALLER}' in deploy job."
            exit 1
          fi
          INTERNAL_ARTIFACT_FILENAME_VAL="${artifactId}-${version}.${packaging}"
          echo "INTERNAL_ARTIFACT_FILENAME=${INTERNAL_ARTIFACT_FILENAME_VAL}" >> $GITHUB_ENV
          echo "‚úÖ Deploy Job - ZIP Filename: ${NEW_NAME_VAL}.zip"
          echo "‚úÖ Deploy Job - Internal Artifact Filename: ${INTERNAL_ARTIFACT_FILENAME_VAL}"

      - name: "üì• Download Artifact ZIP from build job"
        uses: actions/download-artifact@v4
        with:
          name: application-package
          path: ./downloaded-artifact
        
      - name: "üîé Verify and Prepare ZIP for SCP"
        run: |
          echo "üìÇ Verifying downloaded artifact in ./downloaded-artifact:"
          ls -lR ./downloaded-artifact
          if [ -f "./downloaded-artifact/${{ env.ZIP_FILENAME }}" ]; then
            mv "./downloaded-artifact/${{ env.ZIP_FILENAME }}" "./${{ env.ZIP_FILENAME }}"
            echo "‚úÖ ZIP '${{ env.ZIP_FILENAME }}' moved and prepared for SCP."
            ls -l "./${{ env.ZIP_FILENAME }}"
          else
            echo "‚ùå ERROR: Expected ZIP file '${{ env.ZIP_FILENAME }}' not found in downloaded artifact."
            exit 1
          fi

      - name: "üöö Copiar archivo ZIP al servidor WebLogic"
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST_VAR }}
          username: ${{ env.SSH_USER_VAR }}
          key: ${{ secrets.REUSABLE_AZURE_VM_SSH_PRIVATE_KEY }}
          source: "./${{ env.ZIP_FILENAME }}"
          target: "${{ env.ARTIFACT_DEST_DIR_REMOTE_VAR }}/"
          debug: true # habilitado para if troubleshooting en scp-action 
        
      - name: "üì¶ Extraer artefacto en el servidor WebLogic"
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST_VAR }}
          username: ${{ env.SSH_USER_VAR }}
          key: ${{ secrets.REUSABLE_AZURE_VM_SSH_PRIVATE_KEY }}
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.
            echo "üöÄ Attempting to extract '${{ env.INTERNAL_ARTIFACT_FILENAME }}' from '${{ env.ZIP_FILENAME }}' on server."
            REMOTE_ZIP_PATH="${{ env.ARTIFACT_DEST_DIR_REMOTE_VAR }}/${{ env.ZIP_FILENAME }}"
            REMOTE_ARTIFACT_PATH="${{ env.ARTIFACT_DEST_DIR_REMOTE_VAR }}/${{ env.INTERNAL_ARTIFACT_FILENAME }}"
            DEST_DIR="${{ env.ARTIFACT_DEST_DIR_REMOTE_VAR }}"

            echo "Verifying remote ZIP file: $REMOTE_ZIP_PATH"
            if [ ! -f "$REMOTE_ZIP_PATH" ]; then
              echo "‚ùå ERROR: Remote ZIP file not found at $REMOTE_ZIP_PATH"
              ls -la "$DEST_DIR"
              exit 1
            fi
            
            echo "Unzipping $REMOTE_ZIP_PATH to $DEST_DIR, extracting ${{ env.INTERNAL_ARTIFACT_FILENAME }}"
            unzip -o "$REMOTE_ZIP_PATH" -d "$DEST_DIR" "${{ env.INTERNAL_ARTIFACT_FILENAME }}"
            
            echo "Verifying extracted artifact: $REMOTE_ARTIFACT_PATH"
            if [ -f "$REMOTE_ARTIFACT_PATH" ]; then
              echo "‚úÖ File '${{ env.INTERNAL_ARTIFACT_FILENAME }}' extracted successfully to $DEST_DIR."
              ls -l "$REMOTE_ARTIFACT_PATH"
            else
              echo "‚ùå ERROR: Failed to extract '${{ env.INTERNAL_ARTIFACT_FILENAME }}'."
              echo "Listing contents of ZIP file '$REMOTE_ZIP_PATH' on server:"
              unzip -l "$REMOTE_ZIP_PATH" || echo "Failed to list ZIP contents."
              echo "Listing contents of destination directory '$DEST_DIR' on server:"
              ls -la "$DEST_DIR"
              exit 1
            fi

      - name: "üßπ Desinstalar versi√≥n anterior en WebLogic (Undeploy)"
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST_VAR }}
          username: ${{ env.SSH_USER_VAR }}
          key: ${{ secrets.REUSABLE_AZURE_VM_SSH_PRIVATE_KEY }}
          script: |
            echo "üöÄ Attempting to undeploy application: '${{ env.INTERNAL_ARTIFACT_FILENAME }}'"
            java -cp "${{ env.WEBLOGIC_HOME_LIB_PATH_VAR }}/weblogic.jar" weblogic.Deployer \
              -adminurl "${{ env.WEBLOGIC_ADMIN_URL_VAR }}" \
              -username "${{ env.WEBLOGIC_USERNAME_VAR }}" \
              -password '${{ env.WEBLOGIC_PASSWORD_VAR }}' \
              -undeploy \
              -name "${{ env.INTERNAL_ARTIFACT_FILENAME }}" \
              -targets "${{ env.WEBLOGIC_TARGETS_VAR }}" \
              -verbose || echo "‚ö†Ô∏è Undeploy failed or application did not exist. Continuing..."

      - name: "üöÄ Desplegar nuevo artefacto en WebLogic"
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST_VAR }}
          username: ${{ env.SSH_USER_VAR }}
          key: ${{ secrets.REUSABLE_AZURE_VM_SSH_PRIVATE_KEY }}
          script: |
            REMOTE_ARTIFACT_PATH="${{ env.ARTIFACT_DEST_DIR_REMOTE_VAR }}/${{ env.INTERNAL_ARTIFACT_FILENAME }}"
            echo "üöÄ Attempting to deploy application: '${{ env.INTERNAL_ARTIFACT_FILENAME }}' from path '$REMOTE_ARTIFACT_PATH'"
            java -cp "${{ env.WEBLOGIC_HOME_LIB_PATH_VAR }}/weblogic.jar" weblogic.Deployer \
              -adminurl "${{ env.WEBLOGIC_ADMIN_URL_VAR }}" \
              -username "${{ env.WEBLOGIC_USERNAME_VAR }}" \
              -password '${{ env.WEBLOGIC_PASSWORD_VAR }}' \
              -deploy \
              -name "${{ env.INTERNAL_ARTIFACT_FILENAME }}" \
              -source "$REMOTE_ARTIFACT_PATH" \
              -targets "${{ env.WEBLOGIC_TARGETS_VAR }}" \
              -upload \
              -verbose
            echo "‚úÖ Deployment command executed."

      # - name: "üîÑ [Paso Opcional] Reiniciar manejadores y/o limpiar cach√©"
      #   if: false 
      #   uses: appleboy/ssh-action@v1.0.3
      #   with:
      #     host: ${{ env.SSH_HOST_VAR }}
      #     username: ${{ env.SSH_USER_VAR }}
      #     key: ${{ secrets.REUSABLE_AZURE_VM_SSH_PRIVATE_KEY }}
      #     script: |
      #       echo "Executing optional post-deployment scripts..."
      #       # ... Tus comandos aqu√≠ ...
      #       echo "Optional post-deployment scripts finished."
